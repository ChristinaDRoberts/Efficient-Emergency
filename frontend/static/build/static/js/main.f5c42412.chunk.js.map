{"version":3,"sources":["containers/callList.js","containers/callDetail.js","containers/callCreate.js","containers/App.js","serviceWorker.js","index.js"],"names":["DispatchCallLogContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","callList","_this2","fetch","then","response","status","console","log","json","toConsumableArray","push","setState","_this3","calls","map","react_default","a","createElement","key","id","src","image","alt","phone","date","className","scene_images","index","Button","variant","onClick","e","route","Component","ClientContainer","image_preview","imageCollection","handleImage","bind","assertThisInitialized","submitImage","event","preventDefault","file","target","files","fileReader","FileReader","onloadend","result","readAsDataURL","formData","FormData","append","JSON","stringify","dispatchCallId","forEach","value","method","body","images","Form","onSubmit","type","onChange","name","DispatchCurrentCallContainer","createCall","conf","headers","Headers","Content-Type","dispatchInfo","setInterval","updateDispatchImages","handleCreateLink","handlePhoneNumber","concat","defineProperty","htmlFor","placeholder","pattern","required","App","currentScreen","pathname","window","location","Container","containers_callList","callCreate","pathParts","split","parseInt","callDetail","Boolean","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f5c42412.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Button} from 'react-bootstrap';\n\n\nclass DispatchCallLogContainer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            callList: []\n        }\n\n\n    };\n\n\n    componentDidMount() {\n        fetch('/api/dispatchcall/').then((response) => {\n            if (response.status !== 200) {\n                console.log(\"problem\")\n            }\n\n            return response.json();\n        }).then(json => {\n            let callList = [...this.state.callList];\n            callList.push(json);\n            console.log('json', json);\n            this.setState({callList: json});\n\n\n        });\n\n    }\n\n    // list of the previous calls., api request filtered by user - get request\n\n\n    render() {\n\n        let calls = this.state.callList.map((call) =>\n            <li key={call.id}><img src={call.image} alt=\"\"/>\n                <p>I am a call</p>\n                <p>{call.id}</p>\n                <p>{call.phone}</p>\n                <p>{call.date}</p>\n                <p className=\"d-none\">\n                    {/*button user that will set state write a method for this, which should be diplayed, toggle to remove display none*/}\n                    {call.scene_images.map((image, index) =>\n                        <img key={index} src={image.image}/>\n                    )}\n                </p>\n            </li>\n        );\n        return (\n            <div>\n                <div className=\"topDispatch\">\n                    <h2>Welcome Dispatcher ! Create A New Call, Or Revisit Previous Calls</h2>\n\n                    <Button variant=\"danger\" className=\"switch\" onClick={(e) => {\n                        this.props.route(\"callCreate\")\n                    }}>Start A Call</Button>\n\n                </div>\n\n                <div>\n\n                    <ul>\n\n                        {calls}\n                    </ul>\n\n                </div>\n\n            </div>\n\n\n        )\n    }\n}\n\nexport default DispatchCallLogContainer;","import {Button, Form} from \"react-bootstrap\";\nimport React, {Component} from 'react';\nimport divWithClassName from \"react-bootstrap/es/utils/divWithClassName\";\n\n\n// this is going to be the screen the client is pn when submitting images\n\n\nclass ClientContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            image_preview: \"\",\n            imageCollection: [],\n            image: \"\",\n        };\n        this.handleImage = this.handleImage.bind(this);\n        this.submitImage = this.submitImage.bind(this);\n    }\n\n    handleImage(event) {\n        //sets the preview box of image in react element\n        event.preventDefault();\n\n        let file = event.target.files[0];\n        let fileReader = new FileReader();\n        fileReader.onloadend = () => this.setState({image_preview: fileReader.result});\n        fileReader.readAsDataURL(file);\n        this.setState({image: file});\n\n    }\n\n\n    submitImage(e) {\n        e.preventDefault();\n\n        // form data needs to be set in here\n        let formData = new FormData();\n        formData.append(\"image\", this.state.image);\n        // formData.append(\"image_Preview\", this.state.image_preview);\n        formData.append(\"imageCollection\", JSON.stringify(this.state.imageCollection));\n        formData.append(\"dispatchCall\", JSON.stringify(this.props.dispatchCallId));\n\n        formData.forEach((value, key) => {\n            console.log(\"key %s: value %s\", key, value);\n        });\n\n        const conf = {\n            method: \"POST\",\n            body: formData,\n\n        };\n\n\n        fetch('/api/scene/', conf).then((response) => {\n            return response.json();\n        }).then((json) => {\n\n            let imageCollection = [...this.state.imageCollection];\n            imageCollection.push(json);\n\n\n            this.setState({imageCollection});\n            this.setState({image_preview: \"\"});\n\n            console.log('added', imageCollection);\n        });\n    };\n\n\n\n\n    render() {\n\n\n        let images = this.state.imageCollection.map(image => {\n            return (\n                <li className=\"scene-photo-li\" key={image.id}><img src={image.image} alt=\"\"/></li>\n            )\n        });\n\n        return (\n\n            <div className=\"scene-div\">\n                <h1 className=\"please-submit-photo\">Please Submit A Photo To Emergency Services</h1>\n\n                <Form onSubmit={this.submitImage}>\n\n                    <img className=\"scene-photos\" src={this.state.image_preview} alt=\"...\"/>\n                    <input className=\"scene-input\" type=\"file\" onChange={this.handleImage} name=\"image\"/>\n\n\n                    <Button className=\"submitImageButtonScene\" type=\"submit\" variant=\"secondary\">Submit This Image !</Button>\n                </Form>\n\n                <div>\n                    <ul className=\"scene-photo-ul\">\n                        {images}\n                    </ul>\n                </div>\n\n\n\n\n            </div>)\n\n\n    };\n}\n\n\nexport default ClientContainer;","import {Button, Form} from \"react-bootstrap\";\nimport React, {Component} from 'react';\n\n\nclass DispatchCurrentCallContainer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            phone: '',\n            dispatchInfo: {id:\"\"},\n            imageCollection : []\n        };\n\n        this.handlePhoneNumber = this.handlePhoneNumber.bind(this);\n        this.createCall = this.createCall.bind(this);\n        this.updateDispatchImages = this.updateDispatchImages.bind(this);\n        this.handleCreateLink = this.handleCreateLink.bind(this);\n\n\n    }\n\n\n\n    updateDispatchImages(event) {\n\n        console.log('update images');\n        // return early to avoid nested mess\n        if (!this.state.dispatchInfo.id){\n            return;\n        }\n\n        fetch(`/api/dispatchcall/${this.state.dispatchInfo.id}/scene/`).then((response) => {\n            if (response.status !== 200) {\n                console.log(\"problem\")\n            }\n\n            return response.json();\n        }).then(json => {\n            this.setState({imageCollection: json});\n            console.log('json', json);\n\n        });\n    };\n\n\n    createCall = (event) => {\n        event.preventDefault();\n\n        let phone = {phone: this.state.phone};\n\n        const conf = {\n            method: \"POST\",\n            body: JSON.stringify(phone),\n            headers: new Headers({\"Content-Type\": \"application/json\"})\n        };\n\n        fetch('/api/dispatchcall/', conf).then((response) => {\n            if (response.status !== 201) {\n                console.log(\"problem\")\n            }\n\n            return response.json();\n        }).then(json => {\n            console.log('json', json);\n            this.setState({dispatchInfo: json});\n\n            setInterval(() => this.updateDispatchImages(), 10000);\n            this.updateDispatchImages();\n\n\n        });\n    };\n\n\n    handlePhoneNumber(e) {\n        console.log(e.target.name, e.target.value);\n        this.setState({[e.target.name]: e.target.value});\n    };\n\n    handleCreateLink = (e) => {\n        e.preventDefault();\n\n        let id = this.state.dispatchInfo.id;\n        let link =  (`localhost:8000/dispatchcalls/ $(id) /scene`) ;\n        console.log(\"link\", link);\n        // send link to twilio file\n\n    };\n\n\n\n\n    render() {\n\n        let images = this.state.imageCollection.map(image=>{\n            return(\n                <li key={image.id}><img src={image.image} alt=\"\"/></li>\n            )\n        });\n\n        return (\n\n\n            <div>\n\n                <h2>Dispatch Current Create Call Page</h2>\n\n                <Form onSubmit={this.createCall}>\n\n                    <label htmlFor=\"phone\">Enter callers phone number:</label>\n\n                    <input type=\"tel\"\n                           id=\"phone\"\n                           name=\"phone\"\n                           placeholder=\"Enter Phone Number Here\"\n                           pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\"\n                           required\n\n                           value={this.state.phone}\n                           onChange={this.handlePhoneNumber}/>\n\n                    <span className=\"note\">Format: 123-456-7890</span>\n                    <br/>\n\n\n                    <Button className=\"createCallButton\" type=\"submit\" variant=\"secondary\">\n                        Create This Call Record</Button>\n                </Form>\n\n                <p> print the call log # here</p>\n\n\n                <Button className=\"sendText\" type=\"submit\" variant=\"secondary\" onClick={this.handleCreateLink}>\n                    SEND LINK THROUGH TEXT</Button>\n\n                <div className=\"imagesFromClient\">\n                    <ul>\n                        {images}\n                    </ul>\n\n                </div>\n\n                <Button className=\"endCall\" onClick={(e) =>{\n                    this.props.route(\"/dispatchcall/\")\n                }}>End Call</Button>\n\n            </div>\n\n\n        )\n    }\n}\n\nexport default DispatchCurrentCallContainer;","import React, { Component } from 'react';\nimport DispatchCallLogContainer from \"./callList\"\nimport ClientContainer from \"./callDetail\"\nimport DispatchCurrentCallContainer from \"./callCreate\"\n// import DispatcherCallsDetailContainer from \"./dispatcherCallsDetail.js\"\n\nimport '../App.css';\nimport {Container} from 'react-bootstrap';\n\n\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currentScreen: window.location,\n\n        };\n    }\n\n\n\n     route = (currentScreen) => {\n        console.log(\"is it setting\", currentScreen);\n        //setting it tp oan object instead of string\n        this.setState({currentScreen: {pathname: currentScreen}});\n        // console.log(\"is it setting\", currentScreen)\n\n    };\n\n\n  render(){\n      console.log(\"TESTING\", this.state.currentScreen.pathname);\n\n    return(\n\n        <div>\n             <Container className=\"MainCont\">\n                            {(() => {\n                                switch (this.state.currentScreen.pathname) {\n                                    case '/dispatchcall/':\n                                        return <DispatchCallLogContainer route={this.route}/>;\n\n                                    // case 'dispatcherCallsDetail':\n                                    //     // let specificCall = props\n                                    //     return <DispatcherCallsDetailContainer route={this.route}/>;\n\n                                    case 'callCreate':\n                                        return <DispatchCurrentCallContainer route={this.route}\n                                                                             imageCollection={this.state.imageCollection}\n                                                                             image_preview={this.state.image_preview}/>;\n\n                                    default :\n\n                                        var pathname = window.location.pathname;\n                                        var pathParts = pathname.split(\"/\");\n                                        let dispatchCallId = parseInt(pathParts[2]);\n                                        console.log(\"dispatchId\", dispatchCallId);\n\n\n\n                                        return <ClientContainer route={this.route} handleImage={this.handleImage}\n                                                                      imageCollection={this.state.imageCollection}\n                                                                        submitImage={this.submitImage}\n                                                                        image={this.state.image}\n                                                                        image_preview={this.state.image_preview}\n                                                                        dispatchCallId={dispatchCallId} />;\n\n                                }\n                            })()}\n\n\n             </Container>\n        </div>\n    )\n  };\n\n}\n\n\nexport default App;\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}