{"version":3,"sources":["containers/callList.js","containers/callDetail.js","containers/callCreate.js","containers/dispatcherCallsDetail.js","containers/heartbeat.js","containers/App.js","serviceWorker.js","index.js"],"names":["DispatchCallLogContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","callList","_this2","fetch","then","response","status","console","log","json","toConsumableArray","push","setState","react_default","a","createElement","callList_OpenImagesOnCallList","route","Component","Card","_this3","handleClose","e","active","handleToggle","_this4","className","id","phone","Button","onClick","Modal","show","onHide","Header","closeButton","Title","Body","scene_images","map","image","index","Image","key","src","OpenImagesOnCallList","_this5","calls","callList_Card","variant","ClientContainer","image_preview","imageCollection","handleImage","bind","assertThisInitialized","submitImage","event","preventDefault","file","target","files","fileReader","FileReader","onloadend","result","readAsDataURL","formData","FormData","append","JSON","stringify","dispatchCallId","forEach","value","method","body","images","alt","Form","onSubmit","type","onChange","name","DispatchCurrentCallContainer","createCall","conf","headers","Headers","Content-Type","dispatchInfo","intervalId","setInterval","updateDispatchImages","sendTextMessage","concat","text","componentWillUnmount","clearInterval","handlePhoneNumber","defineProperty","baseURL","htmlFor","placeholder","pattern","required","href","DispatchCallsDetailContainer","specificCall","data","date","user","username","dispatcherCallsDetail_ModalDetailComponent","dispatcherCallsDetail_TextMedical","TextMedical","ModalDetailComponent","HeartbeatComponent","App","currentScreen","pathname","window","location","Container","heartbeat","containers_callList","dispatcherCallsDetail","callCreate","pathParts","split","parseInt","callDetail","Boolean","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a0214329.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Button, Image, Row, Modal,} from 'react-bootstrap';\n\n// import ModalImage from 'react-modal-image'\n\n\nclass DispatchCallLogContainer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            callList: []\n        }\n\n\n    };\n\n\n    componentDidMount() {\n        fetch('/api/dispatchcall/').then((response) => {\n            if (response.status !== 200) {\n                console.log(\"problem\")\n            }\n\n            return response.json();\n        }).then(json => {\n            let callList = [...this.state.callList];\n            callList.push(json);\n            console.log('json', json);\n            this.setState({callList: json});\n\n\n        });\n\n    }\n\n    render() {\n\n        return (\n            <OpenImagesOnCallList callList={this.state.callList} route={this.props.route}/>\n\n\n        )\n    }\n}\n\nexport default DispatchCallLogContainer;\n\nclass Card extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            active: false\n        }\n    }\n\n    handleClose = (e) => {\n    this.setState({ active: false });\n  };\n\n    handleToggle = (e) => {\n        this.setState({active: !this.state.active});\n\n    };\n\n    render() {\n\n        var call = this.props.call;\n        return (\n\n            <div className=\"card\">\n\n                <div className=\"card-body call-list-card\">\n                    <p>Call #:{call.id}</p>\n                    <p>Phone:{call.phone}</p>\n\n                    <Button className=\"btn btn-secondary\" onClick={this.handleToggle}>Show Images</Button>\n                    <Modal show={this.state.active} onHide={this.handleClose}>\n                        <Modal.Header closeButton>\n                            <Modal.Title>Scene Images</Modal.Title>\n                        </Modal.Header>\n\n                        <Modal.Body>\n                            <ul  id=\"image-drop-down\">\n                                <li className=\"lightbox\">\n                                    {call.scene_images.map((image, index) =>\n                                        <Image className=\"img-thumbnail\" key={index} src={image.image}/>\n                                    )}\n                                    <Button className=\"btn btn-outline-dark\" onClick={(e) => {\n                                        this.props.route(\"dispatcherCallsDetail\", call)\n                                    }}>See/Send Call Detail Page</Button>\n                                </li>\n                            </ul>\n\n                        </Modal.Body>\n\n                    </Modal>\n\n\n\n            </div>\n\n    </div>\n    )\n    }\n}\n\n\nclass OpenImagesOnCallList extends Component {\n    constructor(props) {\n        super(props);\n\n    }\n\n\n    render() {\n        // <img src={call.image} alt=\"\"/>\n\n        let calls = this.props.callList.map((call) =>\n            <Card key={call.id} call={call} route={this.props.route}/>);\n\n\n        return (\n            <div>\n                <div className=\"topDispatch\">\n                    <h2 className=\"wecome-dispatcher\">Create A New Call, Or Revisit Previous Calls</h2>\n\n                    <Button variant=\"danger\" className=\"switch btn-outline-light\" onClick={(e) => {\n                        this.props.route(\"callCreate\")\n                    }}>Start A Call</Button>\n\n                </div>\n\n                <div className=\"card-columns\">\n                    {calls}\n                </div>\n\n\n            </div>\n        )\n    }\n}\n\n","import {Button, Form, Card} from \"react-bootstrap\";\nimport React, {Component} from 'react';\n\n// this is going to be the screen the client is pn when submitting images\n\n\nclass ClientContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            image_preview: \"\",\n            imageCollection: [],\n            image: \"\",\n        };\n        this.handleImage = this.handleImage.bind(this);\n        this.submitImage = this.submitImage.bind(this);\n    }\n\n    handleImage(event) {\n        //sets the preview box of image in react element\n        event.preventDefault();\n\n        let file = event.target.files[0];\n        let fileReader = new FileReader();\n        fileReader.onloadend = () => this.setState({image_preview: fileReader.result});\n        fileReader.readAsDataURL(file);\n        this.setState({image: file});\n\n    }\n\n\n    submitImage(e) {\n        e.preventDefault();\n\n        // form data needs to be set in here\n        let formData = new FormData();\n        formData.append(\"image\", this.state.image);\n        // formData.append(\"image_Preview\", this.state.image_preview);\n        formData.append(\"imageCollection\", JSON.stringify(this.state.imageCollection));\n        formData.append(\"dispatchCall\", JSON.stringify(this.props.dispatchCallId));\n\n        formData.forEach((value, key) => {\n            console.log(\"key %s: value %s\", key, value);\n        });\n\n        const conf = {\n            method: \"POST\",\n            body: formData,\n\n        };\n\n\n        fetch('/api/scene/', conf).then((response) => {\n            return response.json();\n        }).then((json) => {\n\n            let imageCollection = [...this.state.imageCollection];\n            imageCollection.push(json);\n\n\n            this.setState({imageCollection});\n            this.setState({image_preview: \"\"});\n\n            console.log('added', imageCollection);\n        });\n    };\n\n\n\n\n    render() {\n\n\n        let images = this.state.imageCollection.map(image => {\n            return (\n                <li className=\"scene-photo-li\" key={image.id}><img src={image.image} alt=\"\"/></li>\n            )\n        });\n\n        return (\n\n            <div className=\"scene-div\">\n                <h1 className=\"please-submit-photo\">Please Submit A Photo To Emergency Services</h1>\n\n                <Form onSubmit={this.submitImage}>\n\n                    <img className=\"scene-photos\" src={this.state.image_preview} alt=\"...\"/>\n                    <input className=\"scene-input\" type=\"file\" onChange={this.handleImage} name=\"image\"/>\n\n\n                    <Button className=\"submitImageButtonScene\" type=\"submit\" variant=\"secondary\">Submit This Image !</Button>\n                </Form>\n\n                {/*<div className=\"card\">*/}\n                    {/*<div className=\"card-body\">*/}\n                        <ul className=\"scene-photo-ul card-columns\">\n                            {images}\n                        </ul>\n                    {/*</div>*/}\n                {/*</div>*/}\n\n\n\n\n            </div>)\n\n\n    };\n}\n\n\nexport default ClientContainer;","import {Button, Form} from \"react-bootstrap\";\nimport React, {Component} from 'react';\n\n\nclass DispatchCurrentCallContainer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            phone: '',\n            dispatchInfo: {id:\"\"},\n            imageCollection : [],\n            baseURL: 'https://dashboard.heroku.com/apps/efficient-emergency/dispatchcall/'\n        };\n\n        this.handlePhoneNumber = this.handlePhoneNumber.bind(this);\n        this.createCall = this.createCall.bind(this);\n        this.updateDispatchImages = this.updateDispatchImages.bind(this);\n\n\n\n    }\n\n\n\n    updateDispatchImages(event) {\n\n        console.log('update images');\n        // return early to avoid nested mess\n        if (!this.state.dispatchInfo.id){\n            return;\n        }\n\n        fetch(`/api/dispatchcall/${this.state.dispatchInfo.id}/scene/`).then((response) => {\n            if (response.status !== 200) {\n                console.log(\"problem\")\n            }\n\n            return response.json();\n        }).then(json => {\n            this.setState({imageCollection: json});\n            console.log('json', json);\n\n        });\n    };\n\n\n    createCall = (event) => {\n        event.preventDefault();\n\n\n\n        let phone = {phone: this.state.phone};\n\n        const conf = {\n            method: \"POST\",\n            body: JSON.stringify(phone),\n            headers: new Headers({\"Content-Type\": \"application/json\"})\n        };\n\n        fetch('/api/dispatchcall/', conf).then((response) => {\n            if (response.status !== 201) {\n                console.log(\"problem\")\n            }\n\n            return response.json();\n        }).then(json => {\n            console.log('json', json);\n            this.setState({dispatchInfo: json});\n\n            this.intervalId = setInterval(() => this.updateDispatchImages(), 10000);\n            this.updateDispatchImages();\n        });\n\n    };\n\n    sendTextMessage = (e) => {\n        // send to twilio in this method\n        e.preventDefault();\n        //this just sets a variable only used here so i can console log it and verify\n        // let link = `${this.state.baseURL + this.state.dispatchInfo.id}/scene`;\n        // console.log('link', link);\n\n        var formData = new FormData();\n        formData.append('phone', this.state.phone);\n\n        const conf = {\n            method: \"POST\",\n            body: formData,\n        };\n\n        fetch(`/api/sendtext/${this.state.dispatchInfo.id}/`, conf)\n            .then(response => {\n                return response.text();\n            }).then(function(response){\n                console.log(response);\n        });\n    };\n\n\n    componentWillUnmount = (e) =>{\n        clearInterval(this.intervalId);\n    };\n\n    handlePhoneNumber= (e) => {\n        console.log(e.target.name, e.target.value);\n        this.setState({[e.target.name]: e.target.value});\n    };\n\n\n\n\n\n    render() {\n\n        let images = this.state.imageCollection.map(image=>{\n            return(\n                <li key={image.id}><img src={image.image} alt=\"\"/></li>\n            )\n        });\n\n        return (\n\n\n            <div className=\"callCreateMain\">\n\n                <h2 className=\"create-title\">Create Active Call and Send Text Message With Link To Submit Photos</h2>\n\n                <Form onSubmit={this.createCall}>\n\n                    <label className=\"label-phone\" htmlFor=\"phone\">Enter callers phone number:</label>\n\n                    <input className=\"input-phone\"\n                           type=\"tel\"\n                           id=\"phone\"\n                           name=\"phone\"\n                           placeholder=\"Format: 123-456-7890\"\n                           pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\"\n                           required\n\n                           value={this.state.phone}\n                           onChange={this.handlePhoneNumber}/>\n\n                    {/*<span className=\"note\">Format: 123-456-7890</span>*/}\n                    <br/>\n\n\n                    <Button className=\"createCallButton\" type=\"submit\" variant=\"secondary\">\n                        Create This Call Record</Button>\n                </Form>\n\n                {/*<p className=\"success\"> Record Created For : {this.state.phone}</p>*/}\n                <p className=\"link-to-text\" href=\"#\"> https://efficient-emergency.herokuapp.com/dispatchcall/{this.state.dispatchInfo.id}/scene</p>\n\n\n                <Button className=\"sendText\" type=\"submit\" variant=\"secondary\" onClick={this.sendTextMessage}>\n                    SEND LINK THROUGH TEXT</Button>\n\n                <div className=\"imagesFromClient card-columns\">\n                    <ul>\n                        {images}\n                    </ul>\n\n                </div>\n\n                <Button className=\"endCall btn btn-secondary\" onClick={(e) =>{\n                    this.props.route(\"/dispatchcall/\")\n                }}>End Call</Button>\n\n            </div>\n\n\n        )\n    }\n}\n\nexport default DispatchCurrentCallContainer;","import React, {Component} from 'react';\nimport {Button, Image, Modal} from 'react-bootstrap';\nimport divWithClassName from \"react-bootstrap/es/utils/divWithClassName\";\n\n\nclass DispatchCallsDetailContainer extends Component {\n    constructor(props) {\n        super(props);\n\n\n    }\n\n\n\n    render() {\n\n        let specificCall = this.props.data;\n\n        return (\n\n            <div>\n\n                    <ul>\n                        <li key={specificCall.id} className=\"detail-li\">\n                            <h3 className=\"detail-detail\"><strong>Call ID #: </strong>{specificCall.id} </h3>\n                            <h3 className=\"detail-detail\"><strong>Caller Phone # : </strong>{specificCall.phone}</h3>\n\n                            <h3 className=\"detail-detail\"><strong>Call Date: </strong>{specificCall.date}</h3>\n                            <h3 className=\"detail-detail\"><strong>Dispatcher: </strong>{specificCall.user.username}</h3>\n\n\n\n                            <h3 className=\"images-provider-detail-page\" >\n\n                                {specificCall.scene_images.map((image) =>\n                                <div>\n                                    <Image  className='img-thumbnail detail-images'  src={image.image} onClick={this.handleToggle}/>\n\n                                        <ModalDetailComponent specificCall={this.props.data}/>\n                                </div>\n\n\n\n                                )}\n                            </h3>\n\n                        </li>\n                    </ul>\n\n\n\n            <section>\n                <TextMedical route={this.props.route}/>\n            </section>\n            </div>\n\n                )\n            }\n        }\n\n\nexport default DispatchCallsDetailContainer;\n\nclass TextMedical extends Component {\n    constructor(props) {\n    super(props)\n    };\n\n\n    render() {\n        return (\n            <div className=\"er-buttons\">\n                 <Button className=\"btn btn-secondary return-to-call-list\"  onClick={(e) => {\n                    this.props.route(\"/dispatchcall/\")\n                }}>Return To Call List Page </Button>\n\n                <div className=\"er-buttons\">\n                <Button className=\"send-to-field btn btn-secondary\" >Send To Prisma Trauma <p className=\"er-phone\">864-111-2222</p></Button>\n                <Button className=\"send-to-field btn btn-secondary\" >Send To GC EMS <p className=\"er-phone\">864-802-1417</p></Button>\n                <Button className=\"send-to-field btn btn-secondary\" >Send To Thorne Ambulance <p className=\"er-phone\">864-555-7777</p></Button>\n                </div>\n\n\n\n            </div>\n\n\n                )\n            }\n            }\n\n\nclass ModalDetailComponent extends Component{\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            active: false\n        }\n    }\n\n    handleClose = (e) => {\n        this.setState({ active: false });\n      };\n\n    handleToggle = (e) => {\n        this.setState({active: !this.state.active});\n\n    };\n\n    render(){\n        let specificCall = this.props.data;\n\n\n    return(\n        <div>\n            <Modal className=\"detail-modal-main\" show={this.state.active} onHide={this.handleClose}>\n                <Modal.Header closeButton> </Modal.Header>\n                    <Modal.Body>\n                        <Image className='detail-modal'  src={specificCall}/>\n                    </Modal.Body>\n            </Modal>\n        </div>\n\n    )\n    }\n}\n","\nimport React, {Component} from 'react';\n\nclass HeartbeatComponent extends Component {\n    constructor(props) {\n        super(props);\n\n    }\n\n\n\n\n    render() {\n        return (\n            <div className=\"wrapper top\">\n                <div className=\"blockcont\">\n                    <div className=\"block\"></div>\n                    <div className=\"block\"></div>\n                    <div className=\"block\"></div>\n                    <div className=\"block\"></div>\n                    <div className=\"block\"></div>\n                    <div className=\"block\"></div>\n                    <div className=\"block\"></div>\n                    <div className=\"block\"></div>\n                    <div className=\"block\"></div>\n                    <div className=\"block\"></div>\n                    <div className=\"block\"></div>\n                    <div className=\"block\"></div>\n                    <div className=\"block\"></div>\n                    <div className=\"block\"></div>\n                    <div className=\"block\"></div>\n                    <div className=\"block\"></div>\n                    <div className=\"block\"></div>\n                    <div className=\"block\"></div>\n                    <div className=\"block\"></div>\n                    <div className=\"block\"></div>\n                    <div className=\"block\"></div>\n                    <div className=\"block\"></div>\n                    <div className=\"block\"></div>\n                    <div className=\"block\"></div>\n                    <div className=\"block\"></div>\n                    <div className=\"block\"></div>\n                    <div className=\"block\"></div>\n                    <div className=\"block\"></div>\n                    <div className=\"block\"></div>\n                    <div className=\"block\"></div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default HeartbeatComponent\n\n// see https://codepen.io/webstuff/pen/WxRxBB , modified","import React, { Component } from 'react';\nimport DispatchCallLogContainer from \"./callList\"\nimport ClientContainer from \"./callDetail\"\nimport DispatchCurrentCallContainer from \"./callCreate\"\nimport DispatcherCallsDetailContainer from \"./dispatcherCallsDetail.js\"\nimport HeartbeatComponent from \"./heartbeat.js\"\n\n\nimport '../App1.css';\nimport {Container} from 'react-bootstrap';\n\n\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currentScreen: window.location,\n            data : {}\n        };\n    }\n\n\n\n     route = (currentScreen, data) => {\n        //setting it tp oan object instead of string\n        this.setState({currentScreen: {pathname: currentScreen}, data:data});\n        console.log(\"data\", data)\n\n\n    };\n\n\n  render(){\n      console.log(\"TESTING\", this.state.currentScreen.pathname);\n\n    return(\n\n\n             <Container className=\"Fluid\">\n                 <div className=\"mainheart\"><HeartbeatComponent/></div>\n                            {(() => {\n                                switch (this.state.currentScreen.pathname) {\n                                    case '/dispatchcall/':\n                                        return <DispatchCallLogContainer route={this.route} />;\n\n                                    case 'dispatcherCallsDetail':\n                                        // let specificCall = props\n                                        return <DispatcherCallsDetailContainer route={this.route} data={this.state.data}/>;\n\n                                    case 'callCreate':\n                                        return <DispatchCurrentCallContainer route={this.route}\n                                                                             imageCollection={this.state.imageCollection}\n                                                                             image_preview={this.state.image_preview}/>;\n\n                                    default :\n\n                                        var pathname = window.location.pathname;\n                                        var pathParts = pathname.split(\"/\");\n                                        let dispatchCallId = parseInt(pathParts[2]);\n                                        console.log(\"dispatchId\", dispatchCallId);\n\n\n\n                                        return <ClientContainer route={this.route} handleImage={this.handleImage}\n                                                                      imageCollection={this.state.imageCollection}\n                                                                        submitImage={this.submitImage}\n                                                                        image={this.state.image}\n                                                                        image_preview={this.state.image_preview}\n                                                                        dispatchCallId={dispatchCallId} />;\n\n                                }\n                            })()}\n\n\n             </Container>\n    )\n  };\n\n}\n\n\nexport default App;\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}