{"version":3,"sources":["containers/callList.js","containers/callDetail.js","containers/callCreate.js","containers/App.js","serviceWorker.js","index.js"],"names":["DispatchCallLogContainer","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this","react_default","a","createElement","className","Button","variant","onClick","e","route","imageCollection","map","image","key","id","Component","ClientContainer","images","src","alt","Form","onSubmit","submitImage","image_preview","type","onChange","handleImage","name","DispatchCurrentCallContainer","createCall","event","preventDefault","phone","state","conf","method","body","JSON","stringify","headers","Headers","Content-Type","fetch","then","response","status","console","log","json","setTimeout","updateDispatchImages","handleCreateLink","disapatchID","handlePhoneNumber","bind","assertThisInitialized","target","value","setState","defineProperty","_this2","htmlFor","placeholder","pattern","required","App","currentScreen","file","files","fileReader","FileReader","onloadend","result","readAsDataURL","_this3","formData","FormData","append","forEach","toConsumableArray","push","_this4","Container","callList","callCreate","callDetail","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.df232c22.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Container, Form, Button} from 'react-bootstrap';\n\n\nclass DispatchCallLogContainer extends Component {\n    constructor(props) {\n        super(props);\n\n\n    };\n\n    // list of the previous calls., api request filtered by user - get request\n    //include images\n\n    render() {\n        return (\n            <div>\n                <div className=\"topDispatch\">\n                    <h2>Testing Dispatch Call Log Page</h2>\n                    {/*button to start call*/}\n                    <Button variant=\"danger\" className=\"switch\" onClick={(e) => {\n                        this.props.route(\"callCreate\")\n                    }}>Start A Call</Button>\n\n                </div>\n\n                <div>\n                    write map function that lists out all the call data in dispatchcall api\n                    <ul>\n\n                        {this.props.imageCollection.map((image) => {\n                            return (\n                                <li key={image.id}>\n                                    {image.image}\n                                </li>\n                            );\n                        })}\n                    </ul>\n\n                </div>\n\n            </div>\n\n\n        )\n    }\n}\n\nexport default DispatchCallLogContainer;","import {Button, Form} from \"react-bootstrap\";\nimport React, {Component} from 'react';\nimport divWithClassName from \"react-bootstrap/es/utils/divWithClassName\";\n\n\n// this is going to be the screen the client is pn when submitting images\n\n\nclass ClientContainer extends Component {\n    constructor(props) {\n        super(props);\n\n\n    };\n\n    componentDidMount() {\n\n    }\n\n\n    render() {\n\n\n        let images = this.props.imageCollection.map(image=>{\n            return(\n                <li key={image.id}><img src={image.image} alt=\"\"/></li>\n            )\n        });\n\n        return (\n\n            <div>\n                <h1>Please Submit A Photo To Emergency Services</h1>\n\n                <Form onSubmit={this.props.submitImage}>\n\n                    <img src={this.props.image_preview} alt=\"...\"/>\n                    <input className=\"input\" type=\"file\" onChange={this.props.handleImage} name=\"image\"/>\n\n\n                    <Button className=\"submitImageButton\" type=\"submit\" variant=\"secondary\">Submit This Image !</Button>\n                </Form>\n\n                <div>\n                    <ul>\n                        {images}\n                    </ul>\n                </div>\n\n\n            </div>)\n\n\n    };\n}\n\n\nexport default ClientContainer;","import {Button, Form} from \"react-bootstrap\";\nimport React, {Component} from 'react';\n\n\nclass DispatchCurrentCallContainer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            phone: '',\n            disapatchID: ''\n        };\n\n        this.handlePhoneNumber = this.handlePhoneNumber.bind(this);\n        this.createCall = this.createCall.bind(this);\n        this.updateDispatchImages = this.updateDispatchImages.bind(this);\n        this.handleCreateLink = this.handleCreateLink.bind(this);\n\n    }\n\n    updateDispatchImages(event) {\n\n        console.log('update images');\n\n        fetch('/api/scene/').then((response) => {\n            if (response.status !== 200) {\n                console.log(\"problem\")\n            }\n//write a queryset to get only images associated with this dispatch call primary key\n            return response.json();\n        }).then(json => {\n            console.log('json', json);\n        });\n    };\n\n\n    createCall = (event) => {\n        event.preventDefault();\n\n        let phone = {phone: this.state.phone};\n\n        const conf = {\n            method: \"POST\",\n            body: JSON.stringify(phone),\n            headers: new Headers({\"Content-Type\": \"application/json\"})\n        };\n\n        fetch('/api/dispatchcall/', conf).then((response) => {\n            if (response.status !== 201) {\n                console.log(\"problem\")\n            }\n\n            return response.json();\n        }).then(json => {\n            console.log('json', json);\n            //set state to id tis.setState (json.id)\n            setTimeout(() => this.updateDispatchImages, 2000);\n            this.updateDispatchImages();\n\n        });\n    };\n\n\n    handlePhoneNumber(e) {\n        console.log(e.target.name, e.target.value);\n        this.setState({[e.target.name]: e.target.value});\n    };\n\n    handleCreateLink = (e) => {\n        e.preventDefault();\n\n        //use reverse to make string concatenation , request dispatch call id out\n        // call this as event on \"Send Link Through Text\" button\n\n    };\n\n\n\n\n    render() {\n        return (\n\n            <div>\n\n                <h2>Dispatch Current Create Call Page</h2>\n\n                <Form onSubmit={this.createCall}>\n\n                    <label htmlFor=\"phone\">Enter callers phone number:</label>\n\n                    <input type=\"tel\"\n                           id=\"phone\"\n                           name=\"phone\"\n                           placeholder=\"Enter Phone Number Here\"\n                           pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\"\n                           required\n\n                           value={this.state.phone}\n                           onChange={this.handlePhoneNumber}/>\n\n                    <span className=\"note\">Format: 123-456-7890</span>\n                    <br/>\n\n\n                    <Button className=\"createCallButton\" type=\"submit\" variant=\"secondary\">\n                        Create This Call Record</Button>\n                </Form>\n\n\n                <Button className=\"sendText\" type=\"submit\" variant=\"secondary\" onClick={this.handleCreateLink}>\n                    SEND LINK THROUGH TEXT</Button>\n\n                <div className=\"imagesFromClient\">\n                    div of images being uploaded from client will populate through method that\n                    has constant Api checks for new info coming in\n                </div>\n\n                <Button className=\"endCall\" onClick={(e) => {\n                    this.props.route(\"callList\")\n                }}>End Call</Button>\n\n            </div>\n\n\n        )\n    }\n}\n\nexport default DispatchCurrentCallContainer;","import React, { Component } from 'react';\nimport DispatchCallLogContainer from \"./callList\"\nimport ClientContainer from \"./callDetail\"\nimport DispatchCurrentCallContainer from \"./callCreate\"\n\nimport '../App.css';\nimport {Container, Form, Button} from 'react-bootstrap';\n\n\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            image_preview: \"\",\n            imageCollection: [],\n            image: \"\",\n            currentScreen:\"callCreate\",\n        };\n\n     this.handleImage = this.handleImage.bind(this);\n     this.submitImage=this.submitImage.bind(this);\n    }\n\n    handleImage(event) {\n        //sets the preview box of image in react element\n        event.preventDefault();\n\n        let file = event.target.files[0];\n        let fileReader = new FileReader();\n        fileReader.onloadend = () => this.setState({image_preview: fileReader.result});\n        fileReader.readAsDataURL(file);\n        this.setState({image: file});\n\n    }\n\n\n    submitImage(e) {\n        e.preventDefault();\n\n        // form data needs to be set in here\n        let formData = new FormData();\n        formData.append(\"image\", this.state.image);\n        // formData.append(\"image_Preview\", this.state.image_preview);\n        formData.append(\"imageCollection\", JSON.stringify(this.state.imageCollection));\n\n        formData.forEach((value, key) => {\n            console.log(\"key %s: value %s\", key, value);\n        });\n\n        const conf = {\n            method: \"POST\",\n            body: formData,\n            // headers: new Headers({\"Content-Type\": \"application/json\"})\n\n        };\n\n\n        fetch('/api/scene/', conf).then((response) => {\n            return response.json();\n        }).then((json) => {\n\n             let imageCollection = [...this.state.imageCollection];\n             imageCollection.push(json);\n\n             // both of these have error\n            this.setState({imageCollection});\n            this.setState({image_preview: \"\"});\n\n             console.log('added', imageCollection);\n\n\n        });\n\n\n\n\n\n    }\n\n\n\n\n     route = (currentScreen) => {\n        this.setState({currentScreen});\n\n    };\n\n\n  render(){\n    return(\n\n        <div>\n             <Container className=\"MainCont\">\n                            {(() => {\n                                switch (this.state.currentScreen) {\n                                    case 'callList':\n                                        return <DispatchCallLogContainer route={this.route}\n                                                                    imageCollection={this.state.imageCollection} />;\n                                    case 'callCreate':\n                                        return <DispatchCurrentCallContainer route={this.route}\n                                                                             imageCollection={this.state.imageCollection}\n                                                                             image_preview={this.state.image_preview}/>;\n                                    case 'callDetail':\n                                        return <ClientContainer route={this.route} handleImage={this.handleImage}\n                                                                      imageCollection={this.state.imageCollection}\n                                                                        submitImage={this.submitImage}\n                                                                        image={this.state.image}\n                                                                        image_preview={this.state.image_preview}/>;\n                                   // how do i link sign up screens if these are all react screens\n                                }\n                            })()}\n\n\n             </Container>\n        </div>\n    )\n  };\n\n}\n\n\nexport default App;\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}