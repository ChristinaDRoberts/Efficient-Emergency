{"version":3,"sources":["containers/callList.js","containers/callDetail.js","containers/callCreate.js","containers/App.js","serviceWorker.js","index.js"],"names":["DispatchCallLogContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","callList","_this2","fetch","then","response","status","console","log","json","setState","_this3","react_default","a","createElement","className","Button","variant","onClick","e","route","map","key","id","href","phone","date","scene_images","Component","ClientContainer","image_preview","imageCollection","image","handleImage","bind","assertThisInitialized","submitImage","event","preventDefault","file","target","files","fileReader","FileReader","onloadend","result","readAsDataURL","formData","FormData","append","JSON","stringify","dispatchCallId","forEach","value","method","body","toConsumableArray","push","images","src","alt","Form","onSubmit","type","onChange","name","DispatchCurrentCallContainer","createCall","conf","headers","Headers","Content-Type","dispatchInfo","setInterval","updateDispatchImages","handleCreateLink","handlePhoneNumber","concat","defineProperty","htmlFor","placeholder","pattern","required","App","currentScreen","window","location","pathname","Container","callCreate","pathParts","split","parseInt","callDetail","Boolean","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c0894dbd.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { Button} from 'react-bootstrap';\n\n\nclass DispatchCallLogContainer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            callList: []\n        }\n\n\n    };\n\n\n    componentDidMount() {\n        fetch('/api/dispatchcall/').then((response) => {\n            if (response.status !== 200) {\n                console.log(\"problem\")\n            }\n\n            return response.json();\n        }).then(json => {\n            this.setState({callList: json});\n            console.log('json', json);\n\n        });\n\n    }\n\n    // list of the previous calls., api request filtered by user - get request\n\n\n    render() {\n        return (\n            <div>\n                <div className=\"topDispatch\">\n                    <h2>Welcome Dispatcher ! Create A New Call, Or Revisit Previous Calls</h2>\n\n                    <Button variant=\"danger\" className=\"switch\" onClick={(e) => {\n                        this.props.route(\"callCreate\")\n                    }}>Start A Call</Button>\n\n                </div>\n\n                <div>\n\n                    <ul>\n\n                        {this.state.callList.map((call) => {\n                            return (\n                                //add redirect to the call detail page\n                                <li key={call.id}><a href=\"#\" onClick={(e) => {\n                                this.props.route(\"dispatchCallsDetail\")\n                                    }}>\n                                   Phone = {call.phone},    Call# = {call.id},    {call.date} {call.scene_images}</a>\n                                    {/*write an event handler for on click display images*/}\n                                </li>\n                            );\n                        })}\n                    </ul>\n\n                </div>\n\n            </div>\n\n\n        )\n    }\n}\n\nexport default DispatchCallLogContainer;","import {Button, Form} from \"react-bootstrap\";\nimport React, {Component} from 'react';\nimport divWithClassName from \"react-bootstrap/es/utils/divWithClassName\";\n\n\n// this is going to be the screen the client is pn when submitting images\n\n\nclass ClientContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            image_preview: \"\",\n            imageCollection: [],\n            image: \"\",\n        };\n        this.handleImage = this.handleImage.bind(this);\n        this.submitImage = this.submitImage.bind(this);\n    }\n\n    handleImage(event) {\n        //sets the preview box of image in react element\n        event.preventDefault();\n\n        let file = event.target.files[0];\n        let fileReader = new FileReader();\n        fileReader.onloadend = () => this.setState({image_preview: fileReader.result});\n        fileReader.readAsDataURL(file);\n        this.setState({image: file});\n\n    }\n\n\n    submitImage(e) {\n        e.preventDefault();\n\n        // form data needs to be set in here\n        let formData = new FormData();\n        formData.append(\"image\", this.state.image);\n        // formData.append(\"image_Preview\", this.state.image_preview);\n        formData.append(\"imageCollection\", JSON.stringify(this.state.imageCollection));\n        formData.append(\"dispatchCall\", JSON.stringify(this.props.dispatchCallId));\n\n        formData.forEach((value, key) => {\n            console.log(\"key %s: value %s\", key, value);\n        });\n\n        const conf = {\n            method: \"POST\",\n            body: formData,\n\n        };\n\n\n        fetch('/api/scene/', conf).then((response) => {\n            return response.json();\n        }).then((json) => {\n\n            let imageCollection = [...this.state.imageCollection];\n            imageCollection.push(json);\n\n\n            this.setState({imageCollection});\n            this.setState({image_preview: \"\"});\n\n            console.log('added', imageCollection);\n        });\n    };\n\n\n\n\n    render() {\n\n\n        let images = this.state.imageCollection.map(image => {\n            return (\n                <li className=\"scene-photo-li\" key={image.id}><img src={image.image} alt=\"\"/></li>\n            )\n        });\n\n        return (\n\n            <div className=\"scene-div\">\n                <h1 className=\"please-submit-photo\">Please Submit A Photo To Emergency Services</h1>\n\n                <Form onSubmit={this.submitImage}>\n\n                    <img className=\"scene-photos\" src={this.state.image_preview} alt=\"...\"/>\n                    <input className=\"scene-input\" type=\"file\" onChange={this.handleImage} name=\"image\"/>\n\n\n                    <Button className=\"submitImageButtonScene\" type=\"submit\" variant=\"secondary\">Submit This Image !</Button>\n                </Form>\n\n                <div>\n                    <ul className=\"scene-photo-ul\">\n                        {images}\n                    </ul>\n                </div>\n\n\n            </div>)\n\n\n    };\n}\n\n\nexport default ClientContainer;","import {Button, Form} from \"react-bootstrap\";\nimport React, {Component} from 'react';\n\n\nclass DispatchCurrentCallContainer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            phone: '',\n            dispatchInfo: {id:\"\"},\n            imageCollection : []\n        };\n\n        this.handlePhoneNumber = this.handlePhoneNumber.bind(this);\n        this.createCall = this.createCall.bind(this);\n        this.updateDispatchImages = this.updateDispatchImages.bind(this);\n        this.handleCreateLink = this.handleCreateLink.bind(this);\n\n\n    }\n\n\n\n    updateDispatchImages(event) {\n\n        console.log('update images');\n        // return early to avoid nested mess\n        if (!this.state.dispatchInfo.id){\n            return;\n        }\n\n        fetch(`/api/dispatchcall/${this.state.dispatchInfo.id}/scene/`).then((response) => {\n            if (response.status !== 200) {\n                console.log(\"problem\")\n            }\n\n            return response.json();\n        }).then(json => {\n            this.setState({imageCollection: json});\n            console.log('json', json);\n\n        });\n    };\n\n\n    createCall = (event) => {\n        event.preventDefault();\n\n        let phone = {phone: this.state.phone};\n\n        const conf = {\n            method: \"POST\",\n            body: JSON.stringify(phone),\n            headers: new Headers({\"Content-Type\": \"application/json\"})\n        };\n\n        fetch('/api/dispatchcall/', conf).then((response) => {\n            if (response.status !== 201) {\n                console.log(\"problem\")\n            }\n\n            return response.json();\n        }).then(json => {\n            console.log('json', json);\n            this.setState({dispatchInfo: json});\n\n            setInterval(() => this.updateDispatchImages(), 10000);\n            this.updateDispatchImages();\n\n\n        });\n    };\n\n\n    handlePhoneNumber(e) {\n        console.log(e.target.name, e.target.value);\n        this.setState({[e.target.name]: e.target.value});\n    };\n\n    handleCreateLink = (e) => {\n        e.preventDefault();\n\n        let id = this.state.dispatchInfo.id;\n        let link =  (`localhost:8000/dispatchcalls/ $(id) /scene`) ;\n        console.log(\"link\", link);\n        // send link to twilio file\n\n    };\n\n\n\n\n    render() {\n\n        let images = this.state.imageCollection.map(image=>{\n            return(\n                <li key={image.id}><img src={image.image} alt=\"\"/></li>\n            )\n        });\n\n        return (\n\n\n            <div>\n\n                <h2>Dispatch Current Create Call Page</h2>\n\n                <Form onSubmit={this.createCall}>\n\n                    <label htmlFor=\"phone\">Enter callers phone number:</label>\n\n                    <input type=\"tel\"\n                           id=\"phone\"\n                           name=\"phone\"\n                           placeholder=\"Enter Phone Number Here\"\n                           pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\"\n                           required\n\n                           value={this.state.phone}\n                           onChange={this.handlePhoneNumber}/>\n\n                    <span className=\"note\">Format: 123-456-7890</span>\n                    <br/>\n\n\n                    <Button className=\"createCallButton\" type=\"submit\" variant=\"secondary\">\n                        Create This Call Record</Button>\n                </Form>\n\n                <p> print the call log # here</p>\n\n\n                <Button className=\"sendText\" type=\"submit\" variant=\"secondary\" onClick={this.handleCreateLink}>\n                    SEND LINK THROUGH TEXT</Button>\n\n                <div className=\"imagesFromClient\">\n                    <ul>\n                        {images}\n                    </ul>\n\n                </div>\n\n                <Button className=\"endCall\" onClick={(e) => {\n                    this.props.route(\"callList\")\n                }}>End Call</Button>\n\n            </div>\n\n\n        )\n    }\n}\n\nexport default DispatchCurrentCallContainer;","import React, { Component } from 'react';\nimport DispatchCallLogContainer from \"./callList\"\nimport ClientContainer from \"./callDetail\"\nimport DispatchCurrentCallContainer from \"./callCreate\"\n// import DispatcherCallsDetailContainer from \"./dispatcherCallsDetail.js\"\n\nimport '../App.css';\nimport {Container} from 'react-bootstrap';\n\n\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currentScreen: window.location,\n\n        };\n    }\n\n\n\n     route = (currentScreen) => {\n        console.log(\"is it setting\", currentScreen)\n        this.setState({currentScreen});\n        // console.log(\"is it setting\", currentScreen)\n\n    };\n\n\n  render(){\n      console.log(\"TESTING\", this.state.currentScreen.pathname);\n\n    return(\n\n        <div>\n             <Container className=\"MainCont\">\n                            {(() => {\n                                switch (this.state.currentScreen.pathname) {\n                                    case '/dispatchcall/':\n                                        return <DispatchCallLogContainer route={this.route}/>;\n\n                                    // case 'dispatcherCallsDetail':\n                                    //     // let specificCall = props\n                                    //     return <DispatcherCallsDetailContainer route={this.route}/>;\n\n                                    case 'callCreate':\n                                        return <DispatchCurrentCallContainer route={this.route}\n                                                                             imageCollection={this.state.imageCollection}\n                                                                             image_preview={this.state.image_preview}/>;\n\n                                    default :\n\n                                        var pathname = window.location.pathname;\n                                        var pathParts = pathname.split(\"/\");\n                                        let dispatchCallId = parseInt(pathParts[2]);\n                                        console.log(\"dispatchId\", dispatchCallId);\n\n\n\n                                        return <ClientContainer route={this.route} handleImage={this.handleImage}\n                                                                      imageCollection={this.state.imageCollection}\n                                                                        submitImage={this.submitImage}\n                                                                        image={this.state.image}\n                                                                        image_preview={this.state.image_preview}\n                                                                        dispatchCallId={dispatchCallId} />;\n\n                                }\n                            })()}\n\n\n             </Container>\n        </div>\n    )\n  };\n\n}\n\n\nexport default App;\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}