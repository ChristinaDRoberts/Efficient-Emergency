{"version":3,"sources":["containers/callList.js","containers/callDetail.js","containers/callCreate.js","containers/dispatcherCallsDetail.js","containers/App.js","serviceWorker.js","index.js"],"names":["DispatchCallLogContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","callList","_this2","fetch","then","response","status","console","log","json","toConsumableArray","push","setState","react_default","a","createElement","callList_OpenImagesOnCallList","route","Component","Card","_this3","handleToggle","e","active","_this4","className","id","phone","Button","onClick","scene_images","map","image","index","Image","key","src","OpenImagesOnCallList","_this5","calls","callList_Card","variant","ClientContainer","image_preview","imageCollection","handleImage","bind","assertThisInitialized","submitImage","event","preventDefault","file","target","files","fileReader","FileReader","onloadend","result","readAsDataURL","formData","FormData","append","JSON","stringify","dispatchCallId","forEach","value","method","body","images","alt","Form","onSubmit","type","onChange","name","DispatchCurrentCallContainer","createCall","conf","headers","Headers","Content-Type","dispatchInfo","intervalId","setInterval","updateDispatchImages","sendTextMessage","concat","text","componentWillUnmount","clearInterval","handlePhoneNumber","defineProperty","baseURL","htmlFor","placeholder","pattern","required","href","DispatchCallsDetailContainer","specificCall","dispatchCall","data","date","dispatcherCallsDetail_TextMedical","TextMedical","App","currentScreen","pathname","window","location","Container","containers_callList","dispatcherCallsDetail","callCreate","pathParts","split","parseInt","callDetail","Boolean","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.af6f26fa.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Button, Image, Row} from 'react-bootstrap';\nimport divWithClassName from \"react-bootstrap/es/utils/divWithClassName\";\n\n\nclass DispatchCallLogContainer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            callList: []\n        }\n\n\n    };\n\n\n    componentDidMount() {\n        fetch('/api/dispatchcall/').then((response) => {\n            if (response.status !== 200) {\n                console.log(\"problem\")\n            }\n\n            return response.json();\n        }).then(json => {\n            let callList = [...this.state.callList];\n            callList.push(json);\n            console.log('json', json);\n            this.setState({callList: json});\n\n\n        });\n\n    }\n\n    render() {\n\n        return (\n            <OpenImagesOnCallList callList={this.state.callList} route={this.props.route}/>\n\n\n        )\n    }\n}\n\nexport default DispatchCallLogContainer;\n\nclass Card extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            active: false\n        }\n    }\n\n    handleToggle = (e) => {\n        // https://developer.mozilla.org/en-US/docs/Web/API/Node/nextSibling\n        //this removes the class name of \"d-none\" off of the images\n        // e.target.nextSibling.classList.toggle('d-none');\n        this.setState({active: !this.state.active});\n    };\n\n    render() {\n        // does this props call come from the claqss below, in the mqp function?\n        var call = this.props.call;\n        return (\n\n            <div className=\"card\">\n                <div className=\"card-body\">\n                    <p>Call #:{call.id}</p>\n                    <p>Phone:{call.phone}</p>\n                    {/*<p>Date:{call.date}</p>*/}\n                    <Button onClick={this.handleToggle}>Show Images</Button>\n\n                    <ul className={this.state.active ? '' : 'd-none'} id=\"image-drop-down\">\n                        <li>\n                            {call.scene_images.map((image, index) =>\n                                <Image className=\"img-thumbnail\" key={index} src={image.image}/>\n                            )}\n                            <Button onClick={(e) => {\n                                this.props.route(\"dispatcherCallsDetail\", call)\n                            }}>See/Send Call Detail Page</Button>\n                        </li>\n                    </ul>\n                </div>\n\n            </div>\n        )\n    }\n}\n\n\nclass OpenImagesOnCallList extends Component {\n    constructor(props) {\n        super(props);\n\n    }\n\n\n    render() {\n        // <img src={call.image} alt=\"\"/>\n\n        let calls = this.props.callList.map((call) =>\n            <Card key={call.id} call={call} route={this.props.route}/>);\n\n\n        return (\n            <div>\n                <div className=\"topDispatch\">\n                    <h2>Welcome Dispatcher ! Create A New Call, Or Revisit Previous Calls</h2>\n\n                    <Button variant=\"danger\" className=\"switch\" onClick={(e) => {\n                        this.props.route(\"callCreate\")\n                    }}>Start A Call</Button>\n\n                </div>\n\n                <div className=\"card-columns\">\n                    {calls}\n                </div>\n\n            </div>\n        )\n    }\n}\n\n","import {Button, Form} from \"react-bootstrap\";\nimport React, {Component} from 'react';\nimport divWithClassName from \"react-bootstrap/es/utils/divWithClassName\";\n\n\n// this is going to be the screen the client is pn when submitting images\n\n\nclass ClientContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            image_preview: \"\",\n            imageCollection: [],\n            image: \"\",\n        };\n        this.handleImage = this.handleImage.bind(this);\n        this.submitImage = this.submitImage.bind(this);\n    }\n\n    handleImage(event) {\n        //sets the preview box of image in react element\n        event.preventDefault();\n\n        let file = event.target.files[0];\n        let fileReader = new FileReader();\n        fileReader.onloadend = () => this.setState({image_preview: fileReader.result});\n        fileReader.readAsDataURL(file);\n        this.setState({image: file});\n\n    }\n\n\n    submitImage(e) {\n        e.preventDefault();\n\n        // form data needs to be set in here\n        let formData = new FormData();\n        formData.append(\"image\", this.state.image);\n        // formData.append(\"image_Preview\", this.state.image_preview);\n        formData.append(\"imageCollection\", JSON.stringify(this.state.imageCollection));\n        formData.append(\"dispatchCall\", JSON.stringify(this.props.dispatchCallId));\n\n        formData.forEach((value, key) => {\n            console.log(\"key %s: value %s\", key, value);\n        });\n\n        const conf = {\n            method: \"POST\",\n            body: formData,\n\n        };\n\n\n        fetch('/api/scene/', conf).then((response) => {\n            return response.json();\n        }).then((json) => {\n\n            let imageCollection = [...this.state.imageCollection];\n            imageCollection.push(json);\n\n\n            this.setState({imageCollection});\n            this.setState({image_preview: \"\"});\n\n            console.log('added', imageCollection);\n        });\n    };\n\n\n\n\n    render() {\n\n\n        let images = this.state.imageCollection.map(image => {\n            return (\n                <li className=\"scene-photo-li\" key={image.id}><img src={image.image} alt=\"\"/></li>\n            )\n        });\n\n        return (\n\n            <div className=\"scene-div\">\n                <h1 className=\"please-submit-photo\">Please Submit A Photo To Emergency Services</h1>\n\n                <Form onSubmit={this.submitImage}>\n\n                    <img className=\"scene-photos\" src={this.state.image_preview} alt=\"...\"/>\n                    <input className=\"scene-input\" type=\"file\" onChange={this.handleImage} name=\"image\"/>\n\n\n                    <Button className=\"submitImageButtonScene\" type=\"submit\" variant=\"secondary\">Submit This Image !</Button>\n                </Form>\n\n                <div>\n                    <ul className=\"scene-photo-ul\">\n                        {images}\n                    </ul>\n                </div>\n\n\n\n\n            </div>)\n\n\n    };\n}\n\n\nexport default ClientContainer;","import {Button, Form} from \"react-bootstrap\";\nimport React, {Component} from 'react';\n\n\nclass DispatchCurrentCallContainer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            phone: '',\n            dispatchInfo: {id:\"\"},\n            imageCollection : [],\n            baseURL: 'https://dashboard.heroku.com/apps/efficient-emergency/dispatchcall/'\n        };\n\n        this.handlePhoneNumber = this.handlePhoneNumber.bind(this);\n        this.createCall = this.createCall.bind(this);\n        this.updateDispatchImages = this.updateDispatchImages.bind(this);\n\n\n\n    }\n\n\n\n    updateDispatchImages(event) {\n\n        console.log('update images');\n        // return early to avoid nested mess\n        if (!this.state.dispatchInfo.id){\n            return;\n        }\n\n        fetch(`/api/dispatchcall/${this.state.dispatchInfo.id}/scene/`).then((response) => {\n            if (response.status !== 200) {\n                console.log(\"problem\")\n            }\n\n            return response.json();\n        }).then(json => {\n            this.setState({imageCollection: json});\n            console.log('json', json);\n\n        });\n    };\n\n\n    createCall = (event) => {\n        event.preventDefault();\n\n\n\n        let phone = {phone: this.state.phone};\n\n        const conf = {\n            method: \"POST\",\n            body: JSON.stringify(phone),\n            headers: new Headers({\"Content-Type\": \"application/json\"})\n        };\n\n        fetch('/api/dispatchcall/', conf).then((response) => {\n            if (response.status !== 201) {\n                console.log(\"problem\")\n            }\n\n            return response.json();\n        }).then(json => {\n            console.log('json', json);\n            this.setState({dispatchInfo: json});\n\n            this.intervalId = setInterval(() => this.updateDispatchImages(), 10000);\n            this.updateDispatchImages();\n        });\n\n    };\n\n    sendTextMessage = (e) => {\n        // send to twilio in this method\n        e.preventDefault();\n        //this just sets a variable only used here so i can console log it and verify\n        // let link = `${this.state.baseURL + this.state.dispatchInfo.id}/scene`;\n        // console.log('link', link);\n\n        var formData = new FormData();\n        formData.append('phone', this.state.phone);\n\n        const conf = {\n            method: \"POST\",\n            body: formData,\n        };\n\n        fetch(`/api/sendtext/${this.state.dispatchInfo.id}/`, conf)\n            .then(response => {\n                return response.text();\n            }).then(function(response){\n                console.log(response);\n        });\n    };\n\n\n    componentWillUnmount = (e) =>{\n        clearInterval(this.intervalId);\n    };\n\n    handlePhoneNumber= (e) => {\n        console.log(e.target.name, e.target.value);\n        this.setState({[e.target.name]: e.target.value});\n    };\n\n\n\n\n\n    render() {\n\n        let images = this.state.imageCollection.map(image=>{\n            return(\n                <li key={image.id}><img src={image.image} alt=\"\"/></li>\n            )\n        });\n\n        return (\n\n\n            <div>\n\n                <h2>Dispatch Current Create Call Page</h2>\n\n                <Form onSubmit={this.createCall}>\n\n                    <label htmlFor=\"phone\">Enter callers phone number:</label>\n\n                    <input type=\"tel\"\n                           id=\"phone\"\n                           name=\"phone\"\n                           placeholder=\"Format: 123-456-7890\"\n                           pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\"\n                           required\n\n                           value={this.state.phone}\n                           onChange={this.handlePhoneNumber}/>\n\n                    {/*<span className=\"note\">Format: 123-456-7890</span>*/}\n                    <br/>\n\n\n                    <Button className=\"createCallButton\" type=\"submit\" variant=\"secondary\">\n                        Create This Call Record</Button>\n                </Form>\n\n                <p> {this.state.phone}</p>\n                <a href=\"#\"> https://efficient-emergency.herokuapp.com/dispatchcall/{this.state.dispatchInfo.id}/scene</a>\n\n\n                <Button className=\"sendText\" type=\"submit\" variant=\"secondary\" onClick={this.sendTextMessage}>\n                    SEND LINK THROUGH TEXT</Button>\n\n                <div className=\"imagesFromClient\">\n                    <ul>\n                        {images}\n                    </ul>\n\n                </div>\n\n                <Button className=\"endCall\" onClick={(e) =>{\n                    this.props.route(\"/dispatchcall/\")\n                }}>End Call</Button>\n\n            </div>\n\n\n        )\n    }\n}\n\nexport default DispatchCurrentCallContainer;","import React, {Component} from 'react';\nimport {Button, Image} from 'react-bootstrap';\n\n\nclass DispatchCallsDetailContainer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            //im going to need to get the whole list of calls, then im going to need to match the call id with the\n            //button i pressed to get info for correct call\n            calls : [],\n            specificCall: {},\n            dispatchCall: 119,\n        };\n\n    }\n\n    componentDidMount() {\n        //my queryset is alredy set up to only get info filtered to this user\n        // cant use this bc dispatchInfo.id is not available as props\n        // fetch(`/api/dispatchcall/${this.props.dispatchInfo.id}/scene/`).then((response) => {\n        fetch(`/api/dispatchcall/`).then((response) => {\n            // fetch(`/api/dispatchCall/`).then((response) => {\n            if (response.status !== 200) {\n                console.log(\"problem\")\n            }\n\n            // this returns picture id, images, and dispatch call info\n\n            return response.json();\n        }).then(json => {\n            this.setState({calls: json});\n            // currently this is just displaying the info from dispatchCall hard coded\n            console.log('Calls available', json);\n\n        });\n        // i want to write something that will get the specific call id from the call i clicked on. i\n        // am not requesting from the specific api of that call bc i need all the info for that call\n\n\n    }\n\n\n    render() {\n\n        let specificCall = this.props.data;\n\n        return (\n\n            <div>\n                <ul>\n\n                    <li key={specificCall.id}><img src={specificCall.image} alt=\"\"/>\n                        <p>{specificCall.id} call id</p>\n                        <p>{specificCall.phone} call phone</p>\n                        <p>{specificCall.date} call date</p>\n\n                        <p>\n                            {specificCall.scene_images.map((image) =>\n                                <Image src={image.image}/>\n                            )}\n                        </p>\n\n                         </li>\n                </ul>\n\n                        <TextMedical route={this.props.route}/>\n\n            </div>\n\n\n        )\n\n\n    }\n}\n\n\nexport default DispatchCallsDetailContainer;\n\nclass TextMedical extends Component {\n    constructor(props) {\n        super(props)\n    };\n\n\n    render() {\n        return (\n            <div>\n\n\n                <div>\n                    <Button>Send Detail Page To Prisma Trauma <p>864-111-2222</p></Button>\n                    <Button>Send Call Detail Page To GC EMS <p>864-333-4444</p></Button>\n                    <Button>Send Call Detail Page To Thorne Ambulance <p>864-555-7777</p></Button>\n                </div>\n\n                 <Button onClick={(e) => {\n                    this.props.route(\"/dispatchcall/\")\n                }}>Return To Call List Page </Button>\n\n            </div>\n\n\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport DispatchCallLogContainer from \"./callList\"\nimport ClientContainer from \"./callDetail\"\nimport DispatchCurrentCallContainer from \"./callCreate\"\nimport DispatcherCallsDetailContainer from \"./dispatcherCallsDetail.js\"\n\n\nimport '../App.css';\nimport {Container} from 'react-bootstrap';\n\n\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currentScreen: window.location,\n            data : {}\n        };\n    }\n\n\n\n     route = (currentScreen, data) => {\n        // console.log(\"is it setting\", currentScreen);\n        //setting it tp oan object instead of string\n        this.setState({currentScreen: {pathname: currentScreen}, data:data});\n        // console.log(\"is it setting\", currentScreen)\n\n    };\n\n\n  render(){\n      console.log(\"TESTING\", this.state.currentScreen.pathname);\n\n    return(\n\n        <div>\n             <Container className=\"Fluid\">\n                            {(() => {\n                                switch (this.state.currentScreen.pathname) {\n                                    case '/dispatchcall/':\n                                        return <DispatchCallLogContainer route={this.route} />;\n\n                                    case 'dispatcherCallsDetail':\n                                        // let specificCall = props\n                                        return <DispatcherCallsDetailContainer route={this.route} data={this.state.data}/>;\n\n                                    case 'callCreate':\n                                        return <DispatchCurrentCallContainer route={this.route}\n                                                                             imageCollection={this.state.imageCollection}\n                                                                             image_preview={this.state.image_preview}/>;\n\n                                    default :\n\n                                        var pathname = window.location.pathname;\n                                        var pathParts = pathname.split(\"/\");\n                                        let dispatchCallId = parseInt(pathParts[2]);\n                                        console.log(\"dispatchId\", dispatchCallId);\n\n\n\n                                        return <ClientContainer route={this.route} handleImage={this.handleImage}\n                                                                      imageCollection={this.state.imageCollection}\n                                                                        submitImage={this.submitImage}\n                                                                        image={this.state.image}\n                                                                        image_preview={this.state.image_preview}\n                                                                        dispatchCallId={dispatchCallId} />;\n\n                                }\n                            })()}\n\n\n             </Container>\n        </div>\n    )\n  };\n\n}\n\n\nexport default App;\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}