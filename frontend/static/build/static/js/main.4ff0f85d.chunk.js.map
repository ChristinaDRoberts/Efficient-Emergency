{"version":3,"sources":["containers/callList.js","containers/callDetail.js","containers/callCreate.js","containers/App.js","serviceWorker.js","index.js"],"names":["DispatchCallLogContainer","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","Component","ClientContainer","Form","onSubmit","submitImage","src","image_preview","alt","className","type","onChange","handleImage","name","Button","variant","DispatchCurrentCallContainer","App","_this","route","currentScreen","setState","state","image","imageCollection","bind","assertThisInitialized","addImageToArray","event","_this2","preventDefault","file","target","files","fileReader","FileReader","onloadend","result","readAsDataURL","push","console","log","e","_this3","formData","FormData","append","forEach","value","key","fetch","method","body","then","response","json","images","_this4","Container","callList","callCreate","callDetail","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4ff0f85d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import {Container, Form, Button} from 'react-bootstrap';\n\nclass DispatchCallLogContainer extends Component {\n    constructor(props) {\n        super(props);\n\n    };\n\n\n    render() {\n        return (\n            <div>\n                <h2>Testing Dispatch Call Log Page</h2>\n            </div>\n\n\n        )\n    }\n}\n\nexport default DispatchCallLogContainer;","import {Button, Form} from \"react-bootstrap\";\nimport React, { Component } from 'react';\n\n\nclass ClientContainer extends Component {\n    constructor(props) {\n        super(props);\n\n\n        // this.handleImage = this.handleImage.bind(this);\n        // this.addImageToArray = this.addImageToArray.bind(this);\n        // this.submitImage=this.submitImage.bind(this);\n    };\n\n\n    // handleImage(event) {\n    //     //sets the preview box of image in react element\n    //     event.preventDefault();\n    //\n    //     let file = event.target.files[0];\n    //     let fileReader = new FileReader();\n    //     fileReader.onloadend = () => this.setState({image_preview: fileReader.result});\n    //     fileReader.readAsDataURL(file);\n    //     this.setState({image: file});\n    // }\n\n    // addImageToArray(image) {\n    //     //adds image to the state of imageCollection Array\n    //     // let imageCollection = [...this.state.imageCollection];\n    //     let imageCollection = this.state.imageCollection;\n    //     imageCollection.push(image);\n    //     this.setState({imageCollection});\n    //     console.log(this.state.imageCollection)\n    // }\n    //\n    // submitImage(e) {\n    //     e.preventDefault();\n    //\n    //     // form data needs to be set in here\n    //     let formData = new FormData();\n    //     formData.append(\"image\", this.props.image);\n    //     formData.append(\"image_Preview\", this.props.image_preview);\n    //     formData.append(\"imageCollection\", this.props.imageCollection);\n    //\n    //     formData.forEach((value, key) => {\n    //         console.log(\"key %s: value %s\", key, value);\n    //     });\n    //\n    //     const conf = {\n    //         method: \"POST\",\n    //         body: formData,\n    //         // headers: new Headers({\"Content-Type\": \"application/json\"})\n    //\n    //     };\n    //\n    //\n    //     fetch('/api/scene/', conf).then((response) => {\n    //         return response.json();\n    //     }).then((json) => {\n    //         this.addImageToArray(json);\n    //         console.log(\"added\")\n    //\n    //\n    //     });\n    //\n    //     let images = this.props.imageCollection;\n    //     images.push(this.props.image_preview);\n    //     this.setState({imageCollection: images});\n    //\n    // }\n    //\n\n\n\nrender(){\n    return(\n\n    <div>\n          <h1>Testing Image </h1>\n\n         <Form onSubmit={this.props.submitImage}>\n\n              <img src={this.props.image_preview} alt=\"...\"/>\n              <input className=\"input\" type=\"file\" onChange={this.props.handleImage} name=\"image\"/>\n\n\n                 <Button className=\"submitImageButton\" type=\"submit\" variant=\"secondary\">Submit This Image !</Button>\n          </Form>\n\n            <ul>\n                {/*{this.state.imageCollection.map(image, index)}*/}\n                {/*<li key={index}>*/}\n                <li>\n                     <img src={this.props.image_preview} alt=\"...\"/>\n                </li>\n            </ul>\n\n        </div>)\n\n\n\n    };\n}\n\n\nexport default ClientContainer;","import {Button, Form} from \"react-bootstrap\";\nimport React, { Component } from 'react';\n\n\n\nclass DispatchCurrentCallContainer extends Component {\n    constructor(props) {\n        super(props)\n\n\n    };\n\n\n    render() {\n        return (\n            <div>\n\n                <h2>Testing Dispatch Current Call Page</h2>\n\n                <Form>\n                </Form>\n\n            </div>\n\n\n        )\n    }\n}\n\nexport default DispatchCurrentCallContainer;","import React, { Component } from 'react';\nimport DispatchCallLogContainer from \"./callList\"\nimport ClientContainer from \"./callDetail\"\nimport DispatchCurrentCallContainer from \"./callCreate\"\n\nimport '../App.css';\nimport {Container, Form, Button} from 'react-bootstrap';\n\n\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            image_preview: \"\",\n            image: \"\",\n            imageCollection: [],\n            currentScreen:\"callDetail\"\n    };\n     this.handleImage = this.handleImage.bind(this);\n     this.addImageToArray = this.addImageToArray.bind(this);\n     this.submitImage=this.submitImage.bind(this);\n    }\n\n    handleImage(event) {\n        //sets the preview box of image in react element\n        event.preventDefault();\n\n        let file = event.target.files[0];\n        let fileReader = new FileReader();\n        fileReader.onloadend = () => this.setState({image_preview: fileReader.result});\n        fileReader.readAsDataURL(file);\n        this.setState({image: file});\n    }\n\n     addImageToArray(image) {\n        //adds image to the state of imageCollection Array\n        // let imageCollection = [...this.state.imageCollection];\n        let imageCollection = this.state.imageCollection;\n        imageCollection.push(image);\n        this.setState({imageCollection});\n        console.log(this.state.imageCollection)\n    }\n\n    submitImage(e) {\n        e.preventDefault();\n\n        // form data needs to be set in here\n        let formData = new FormData();\n        formData.append(\"image\", this.state.image);\n        formData.append(\"image_Preview\", this.state.image_preview);\n        formData.append(\"imageCollection\", this.state.imageCollection);\n\n        formData.forEach((value, key) => {\n            console.log(\"key %s: value %s\", key, value);\n        });\n\n        const conf = {\n            method: \"POST\",\n            body: formData,\n            // headers: new Headers({\"Content-Type\": \"application/json\"})\n\n        };\n\n\n        fetch('/api/scene/', conf).then((response) => {\n            return response.json();\n        }).then((json) => {\n            this.addImageToArray(json);\n            console.log(\"added\")\n\n\n        });\n\n        let images = this.state.imageCollection;\n        images.push(this.state.image_preview);\n        this.setState({imageCollection: images});\n\n    }\n\n\n\n\n     route = (currentScreen) => {\n\n        this.setState({currentScreen});\n\n    };\n\n\n  render(){\n    return(\n\n        <div>\n             <Container className=\"MainCont\">\n                            {(() => {\n                                switch (this.state.currentScreen) {\n                                    case 'callList':\n                                        return <DispatchCallLogContainer route={this.route}\n                                                                    imageCollection={this.state.imageCollection} />;\n                                    case 'callCreate':\n                                        return <DispatchCurrentCallContainer route={this.route}\n                                                                             imageCollection={this.state.imageCollection}\n                                                                                image_preview={this.state.image_preview}/>;\n                                    case 'callDetail':\n                                        return <ClientContainer route={this.route} handleImage={this.handleImage}\n                                                                      imageCollection={this.state.imageCollection}\n                                                                        addImageToArray={this.addImageToArray}\n                                                                        submitImage={this.submitImage}\n                                                                        image={this.state.image}\n                                                                        image_preview={this.state.image_preview}/>;\n                                   // how do i link sign up screens if these are all react screens\n                                }\n                            })()}\n\n\n             </Container>\n        </div>\n    )\n  };\n\n}\n\n\nexport default App;\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}