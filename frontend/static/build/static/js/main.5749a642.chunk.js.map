{"version":3,"sources":["containers/callList.js","containers/callDetail.js","containers/callCreate.js","containers/App.js","serviceWorker.js","index.js"],"names":["DispatchCallLogContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","callList","_this2","fetch","then","response","status","console","log","json","toConsumableArray","push","setState","react_default","a","createElement","callList_OpenImagesOnCallList","route","Component","OpenImagesOnCallList","_this3","handleToggle","e","target","nextSibling","classList","toggle","active","_this4","calls","map","key","id","src","image","alt","phone","date","Button","onClick","className","scene_images","index","variant","ClientContainer","image_preview","imageCollection","handleImage","bind","assertThisInitialized","submitImage","event","preventDefault","file","files","fileReader","FileReader","onloadend","result","readAsDataURL","formData","FormData","append","JSON","stringify","dispatchCallId","forEach","value","method","body","images","Form","onSubmit","type","onChange","name","DispatchCurrentCallContainer","createCall","conf","headers","Headers","Content-Type","dispatchInfo","setInterval","updateDispatchImages","handleCreateLink","handlePhoneNumber","concat","defineProperty","htmlFor","placeholder","pattern","required","App","currentScreen","pathname","window","location","Container","containers_callList","callCreate","pathParts","split","parseInt","callDetail","Boolean","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5749a642.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Button} from 'react-bootstrap';\nimport divWithClassName from \"react-bootstrap/es/utils/divWithClassName\";\n\n\nclass DispatchCallLogContainer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            callList: []\n        }\n\n\n    };\n\n\n    componentDidMount() {\n        fetch('/api/dispatchcall/').then((response) => {\n            if (response.status !== 200) {\n                console.log(\"problem\")\n            }\n\n            return response.json();\n        }).then(json => {\n            let callList = [...this.state.callList];\n            callList.push(json);\n            console.log('json', json);\n            this.setState({callList: json});\n\n\n        });\n\n    }\n\n    render() {\n\n        return (\n            <OpenImagesOnCallList callList={this.state.callList} route={this.props.route}/>\n\n\n        )\n    }\n}\n\nexport default DispatchCallLogContainer;\n\n\nclass OpenImagesOnCallList extends Component{\n    constructor(props){\n        super(props);\n           this.state = {\n               active: false\n           }\n    }\n\n    handleToggle = (e) => {\n        // https://developer.mozilla.org/en-US/docs/Web/API/Node/nextSibling\n        //this removes the class name of \"d-none\" off of the images\n        e.target.nextSibling.classList.toggle('d-none');\n    };\n\n    render(){\n\n        let calls = this.props.callList.map((call) =>\n            <li key={call.id}><img src={call.image} alt=\"\"/>\n\n                <p>Call #:{call.id}</p>\n                <p>Phone:{call.phone}</p>\n                <p>Date:{call.date}</p>\n                <Button onClick={this.handleToggle}>Show Images</Button>\n                <ul className='d-none'>\n                    Show Images\n                    <li>\n                    {call.scene_images.map((image, index) =>\n                             <img key={index} src={image.image}/>\n\n\n                    )}\n                    </li>\n                </ul>\n            </li>\n        );\n        return(\n            <div>\n                <div className=\"topDispatch\">\n                    <h2>Welcome Dispatcher ! Create A New Call, Or Revisit Previous Calls</h2>\n\n                    <Button variant=\"danger\" className=\"switch\" onClick={(e) => {\n                        this.props.route(\"callCreate\")\n                    }}>Start A Call</Button>\n\n                </div>\n\n                <div>\n\n                    <ul>\n                        {calls}\n                    </ul>\n\n                </div>\n\n            </div>\n\n\n        )\n    }\n\n}\n","import {Button, Form} from \"react-bootstrap\";\nimport React, {Component} from 'react';\nimport divWithClassName from \"react-bootstrap/es/utils/divWithClassName\";\n\n\n// this is going to be the screen the client is pn when submitting images\n\n\nclass ClientContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            image_preview: \"\",\n            imageCollection: [],\n            image: \"\",\n        };\n        this.handleImage = this.handleImage.bind(this);\n        this.submitImage = this.submitImage.bind(this);\n    }\n\n    handleImage(event) {\n        //sets the preview box of image in react element\n        event.preventDefault();\n\n        let file = event.target.files[0];\n        let fileReader = new FileReader();\n        fileReader.onloadend = () => this.setState({image_preview: fileReader.result});\n        fileReader.readAsDataURL(file);\n        this.setState({image: file});\n\n    }\n\n\n    submitImage(e) {\n        e.preventDefault();\n\n        // form data needs to be set in here\n        let formData = new FormData();\n        formData.append(\"image\", this.state.image);\n        // formData.append(\"image_Preview\", this.state.image_preview);\n        formData.append(\"imageCollection\", JSON.stringify(this.state.imageCollection));\n        formData.append(\"dispatchCall\", JSON.stringify(this.props.dispatchCallId));\n\n        formData.forEach((value, key) => {\n            console.log(\"key %s: value %s\", key, value);\n        });\n\n        const conf = {\n            method: \"POST\",\n            body: formData,\n\n        };\n\n\n        fetch('/api/scene/', conf).then((response) => {\n            return response.json();\n        }).then((json) => {\n\n            let imageCollection = [...this.state.imageCollection];\n            imageCollection.push(json);\n\n\n            this.setState({imageCollection});\n            this.setState({image_preview: \"\"});\n\n            console.log('added', imageCollection);\n        });\n    };\n\n\n\n\n    render() {\n\n\n        let images = this.state.imageCollection.map(image => {\n            return (\n                <li className=\"scene-photo-li\" key={image.id}><img src={image.image} alt=\"\"/></li>\n            )\n        });\n\n        return (\n\n            <div className=\"scene-div\">\n                <h1 className=\"please-submit-photo\">Please Submit A Photo To Emergency Services</h1>\n\n                <Form onSubmit={this.submitImage}>\n\n                    <img className=\"scene-photos\" src={this.state.image_preview} alt=\"...\"/>\n                    <input className=\"scene-input\" type=\"file\" onChange={this.handleImage} name=\"image\"/>\n\n\n                    <Button className=\"submitImageButtonScene\" type=\"submit\" variant=\"secondary\">Submit This Image !</Button>\n                </Form>\n\n                <div>\n                    <ul className=\"scene-photo-ul\">\n                        {images}\n                    </ul>\n                </div>\n\n\n\n\n            </div>)\n\n\n    };\n}\n\n\nexport default ClientContainer;","import {Button, Form} from \"react-bootstrap\";\nimport React, {Component} from 'react';\n\n\nclass DispatchCurrentCallContainer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            phone: '',\n            dispatchInfo: {id:\"\"},\n            imageCollection : []\n        };\n\n        this.handlePhoneNumber = this.handlePhoneNumber.bind(this);\n        this.createCall = this.createCall.bind(this);\n        this.updateDispatchImages = this.updateDispatchImages.bind(this);\n        this.handleCreateLink = this.handleCreateLink.bind(this);\n\n\n    }\n\n\n\n    updateDispatchImages(event) {\n\n        console.log('update images');\n        // return early to avoid nested mess\n        if (!this.state.dispatchInfo.id){\n            return;\n        }\n\n        fetch(`/api/dispatchcall/${this.state.dispatchInfo.id}/scene/`).then((response) => {\n            if (response.status !== 200) {\n                console.log(\"problem\")\n            }\n\n            return response.json();\n        }).then(json => {\n            this.setState({imageCollection: json});\n            console.log('json', json);\n\n        });\n    };\n\n\n    createCall = (event) => {\n        event.preventDefault();\n\n        let phone = {phone: this.state.phone};\n\n        const conf = {\n            method: \"POST\",\n            body: JSON.stringify(phone),\n            headers: new Headers({\"Content-Type\": \"application/json\"})\n        };\n\n        fetch('/api/dispatchcall/', conf).then((response) => {\n            if (response.status !== 201) {\n                console.log(\"problem\")\n            }\n\n            return response.json();\n        }).then(json => {\n            console.log('json', json);\n            this.setState({dispatchInfo: json});\n\n            setInterval(() => this.updateDispatchImages(), 10000);\n            this.updateDispatchImages();\n\n\n        });\n    };\n\n\n    handlePhoneNumber(e) {\n        console.log(e.target.name, e.target.value);\n        this.setState({[e.target.name]: e.target.value});\n    };\n\n    handleCreateLink = (e) => {\n        e.preventDefault();\n\n        let id = this.state.dispatchInfo.id;\n        let link =  (`localhost:8000/dispatchcalls/ $(id) /scene`) ;\n        console.log(\"link\", link);\n        // send link to twilio file\n\n    };\n\n\n\n\n    render() {\n\n        let images = this.state.imageCollection.map(image=>{\n            return(\n                <li key={image.id}><img src={image.image} alt=\"\"/></li>\n            )\n        });\n\n        return (\n\n\n            <div>\n\n                <h2>Dispatch Current Create Call Page</h2>\n\n                <Form onSubmit={this.createCall}>\n\n                    <label htmlFor=\"phone\">Enter callers phone number:</label>\n\n                    <input type=\"tel\"\n                           id=\"phone\"\n                           name=\"phone\"\n                           placeholder=\"Enter Phone Number Here\"\n                           pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\"\n                           required\n\n                           value={this.state.phone}\n                           onChange={this.handlePhoneNumber}/>\n\n                    <span className=\"note\">Format: 123-456-7890</span>\n                    <br/>\n\n\n                    <Button className=\"createCallButton\" type=\"submit\" variant=\"secondary\">\n                        Create This Call Record</Button>\n                </Form>\n\n                <p> print the call log # here</p>\n\n\n                <Button className=\"sendText\" type=\"submit\" variant=\"secondary\" onClick={this.handleCreateLink}>\n                    SEND LINK THROUGH TEXT</Button>\n\n                <div className=\"imagesFromClient\">\n                    <ul>\n                        {images}\n                    </ul>\n\n                </div>\n\n                <Button className=\"endCall\" onClick={(e) =>{\n                    this.props.route(\"/dispatchcall/\")\n                }}>End Call</Button>\n\n            </div>\n\n\n        )\n    }\n}\n\nexport default DispatchCurrentCallContainer;","import React, { Component } from 'react';\nimport DispatchCallLogContainer from \"./callList\"\nimport ClientContainer from \"./callDetail\"\nimport DispatchCurrentCallContainer from \"./callCreate\"\n// import DispatcherCallsDetailContainer from \"./dispatcherCallsDetail.js\"\n\n\nimport '../App.css';\nimport {Container} from 'react-bootstrap';\n\n\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currentScreen: window.location,\n\n        };\n    }\n\n\n\n     route = (currentScreen) => {\n        console.log(\"is it setting\", currentScreen);\n        //setting it tp oan object instead of string\n        this.setState({currentScreen: {pathname: currentScreen}});\n        // console.log(\"is it setting\", currentScreen)\n\n    };\n\n\n  render(){\n      console.log(\"TESTING\", this.state.currentScreen.pathname);\n\n    return(\n\n        <div>\n             <Container className=\"MainCont\">\n                            {(() => {\n                                switch (this.state.currentScreen.pathname) {\n                                    case '/dispatchcall/':\n                                        return <DispatchCallLogContainer route={this.route}/>;\n\n                                    // case 'dispatcherCallsDetail':\n                                    //     // let specificCall = props\n                                    //     return <DispatcherCallsDetailContainer route={this.route}/>;\n\n                                    case 'callCreate':\n                                        return <DispatchCurrentCallContainer route={this.route}\n                                                                             imageCollection={this.state.imageCollection}\n                                                                             image_preview={this.state.image_preview}/>;\n\n                                    default :\n\n                                        var pathname = window.location.pathname;\n                                        var pathParts = pathname.split(\"/\");\n                                        let dispatchCallId = parseInt(pathParts[2]);\n                                        console.log(\"dispatchId\", dispatchCallId);\n\n\n\n                                        return <ClientContainer route={this.route} handleImage={this.handleImage}\n                                                                      imageCollection={this.state.imageCollection}\n                                                                        submitImage={this.submitImage}\n                                                                        image={this.state.image}\n                                                                        image_preview={this.state.image_preview}\n                                                                        dispatchCallId={dispatchCallId} />;\n\n                                }\n                            })()}\n\n\n             </Container>\n        </div>\n    )\n  };\n\n}\n\n\nexport default App;\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}