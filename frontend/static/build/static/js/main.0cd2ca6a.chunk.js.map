{"version":3,"sources":["containers/callList.js","containers/callDetail.js","containers/callCreate.js","containers/App.js","serviceWorker.js","index.js"],"names":["DispatchCallLogContainer","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this","react_default","a","createElement","className","Button","variant","onClick","e","route","Component","ClientContainer","Form","onSubmit","submitImage","src","image_preview","alt","type","onChange","handleImage","name","DispatchCurrentCallContainer","createCall","event","preventDefault","phone","state","conf","method","body","JSON","stringify","headers","Headers","Content-Type","fetch","then","response","status","console","log","json","handlePhoneNumber","bind","assertThisInitialized","target","value","setState","defineProperty","htmlFor","id","placeholder","pattern","required","App","currentScreen","imageCollection","image","addImageToArray","_this2","file","files","fileReader","FileReader","onloadend","result","readAsDataURL","push","_this3","formData","FormData","append","forEach","key","_this4","Container","callList","callCreate","callDetail","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0cd2ca6a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Container, Form, Button} from 'react-bootstrap';\n\n\nclass DispatchCallLogContainer extends Component {\n    constructor(props) {\n        super(props);\n\n\n    };\n // list of the previous calls., api request filtered by user - get request\n    //include images\n\n    render() {\n        return (\n            <div>\n                <div className=\"topDispatch\">\n                    <h2>Testing Dispatch Call Log Page</h2>\n                    {/*button to start call*/}\n                    <Button variant=\"danger\" className=\"switch\" onClick={(e) => {\n                                    this.props.route(\"callCreate\")\n                                }}>Start A Call</Button>\n\n                </div>\n\n                <div>\n                    write map function that lists out all the call dat ain dispatchcall api\n                </div>\n            </div>\n\n\n\n        )\n    }\n}\n\nexport default DispatchCallLogContainer;","import {Button, Form} from \"react-bootstrap\";\nimport React, { Component } from 'react';\n\n\n // this is going to be the screen the client is pn when submitting images\n\n\nclass ClientContainer extends Component {\n    constructor(props) {\n        super(props);\n\n\n    };\n\n\n\nrender(){\n    return(\n\n    <div>\n          <h1>Testing Image </h1>\n\n         <Form onSubmit={this.props.submitImage}>\n\n              <img src={this.props.image_preview} alt=\"...\"/>\n              <input className=\"input\" type=\"file\" onChange={this.props.handleImage} name=\"image\"/>\n\n\n                 <Button className=\"submitImageButton\" type=\"submit\" variant=\"secondary\">Submit This Image !</Button>\n          </Form>\n\n            <ul>\n                {/*{this.state.imageCollection.map(image, index)}*/}\n                {/*<li key={index}>*/}\n                <li>\n                     <img src={this.props.image_preview} alt=\"...\"/>\n                </li>\n            </ul>\n\n        </div>)\n\n\n\n    };\n}\n\n\nexport default ClientContainer;","import {Button, Form} from \"react-bootstrap\";\nimport React, {Component} from 'react';\n\n\nclass DispatchCurrentCallContainer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            phone: '',\n\n        };\n\n        this.handlePhoneNumber = this.handlePhoneNumber.bind(this);\n        this.createCall = this.createCall.bind(this)\n\n    }\n\n\n    createCall = (event) => {\n        event.preventDefault();\n\n        // console.log('phone', this.state.phone);\n        let phone = {phone: this.state.phone};\n\n        const conf = {\n            method: \"POST\",\n            body: JSON.stringify(phone),\n            headers: new Headers({\"Content-Type\": \"application/json\"})\n        };\n\n        fetch('/api/dispatchcall/', conf).then((response) => {\n            if (response.status !== 201) {\n                console.log(\"problem\")\n            }\n\n            return response.json();\n        }).then(json => {\n            console.log('json', json);\n        });\n    };\n\n\n    handlePhoneNumber(e) {\n        console.log(e.target.name, e.target.value);\n        this.setState({[e.target.name]: e.target.value});\n        // console.log(\"phone change\", this.state.phone)\n  };\n\n\n        // phoneNumber.preventDefault();\n        // let phone = this.state.phone;\n        // // phone.push(phoneNumber); this is not an array so dont push\n        // this.setState({phone});\n        // console.log( this.state.phone)\n\n    // }\n\n    //api request to constantly check for image collection to scene\n\n    render() {\n        return (\n\n            <div>\n\n                <h2>Testing Dispatch Current Call Page</h2>\n\n                <Form onSubmit={this.createCall}>\n\n                    <label htmlFor=\"phone\">Enter callers phone number:</label>\n\n                    <input type=\"tel\"\n                           id=\"phone\"\n                           name=\"phone\"\n                           placeholder=\"Enter Phone Number Here\"\n                           pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\"\n                           required\n\n                           value={this.state.phone}\n                           onChange={this.handlePhoneNumber}/>\n\n                    <span className=\"note\">Format: 123-456-7890</span>\n\n\n                    <Button className=\"createCallButton\" type=\"submit\" variant=\"secondary\">\n                        Create This Call Record</Button>\n                </Form>\n            </div>\n\n\n        )\n    }\n}\n\nexport default DispatchCurrentCallContainer;","import React, { Component } from 'react';\nimport DispatchCallLogContainer from \"./callList\"\nimport ClientContainer from \"./callDetail\"\nimport DispatchCurrentCallContainer from \"./callCreate\"\n\nimport '../App.css';\nimport {Container, Form, Button} from 'react-bootstrap';\n\n\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            image_preview: \"\",\n            imageCollection: [],\n            image: \"\",\n            currentScreen:\"callList\",\n\n\n    };\n     this.handleImage = this.handleImage.bind(this);\n     this.addImageToArray = this.addImageToArray.bind(this);\n     this.submitImage=this.submitImage.bind(this);\n    }\n\n    handleImage(event) {\n        //sets the preview box of image in react element\n        event.preventDefault();\n\n        let file = event.target.files[0];\n        let fileReader = new FileReader();\n        fileReader.onloadend = () => this.setState({image_preview: fileReader.result});\n        fileReader.readAsDataURL(file);\n        this.setState({image: file});\n    }\n\n     addImageToArray(image) {\n        //adds image to the state of imageCollection Array\n        // let imageCollection = [...this.state.imageCollection];\n        let imageCollection = this.state.imageCollection;\n        imageCollection.push(image);\n        this.setState({imageCollection});\n        console.log(this.state.imageCollection)\n    }\n\n    // componentDidMount() {\n    //      fetch('/api/dispatchcall/').then((response) => {\n    //         return response.json();\n    //  }).then(data => this.setState({ :  }));\n\n    submitImage(e) {\n        e.preventDefault();\n\n        // form data needs to be set in here\n        let formData = new FormData();\n        formData.append(\"image\", this.state.image);\n        // formData.append(\"image_Preview\", this.state.image_preview);\n        formData.append(\"imageCollection\", JSON.stringify(this.state.imageCollection));\n\n        formData.forEach((value, key) => {\n            console.log(\"key %s: value %s\", key, value);\n        });\n\n        const conf = {\n            method: \"POST\",\n            body: formData,\n            // headers: new Headers({\"Content-Type\": \"application/json\"})\n\n        };\n\n\n        fetch('/api/scene/', conf).then((response) => {\n            return response.json();\n        }).then((json) => {\n            this.addImageToArray(json);\n            console.log(\"added\")\n\n\n        });\n\n\n        let {imageCollection} = this.state;\n        imageCollection.push(this.state.image_preview);\n        this.setState({imageCollection});\n\n    }\n\n\n\n\n     route = (currentScreen) => {\n        this.setState({currentScreen});\n\n    };\n\n\n  render(){\n    return(\n\n        <div>\n             <Container className=\"MainCont\">\n                            {(() => {\n                                switch (this.state.currentScreen) {\n                                    case 'callList':\n                                        return <DispatchCallLogContainer route={this.route}\n                                                                    imageCollection={this.state.imageCollection} />;\n                                    case 'callCreate':\n                                        return <DispatchCurrentCallContainer route={this.route}\n                                                                             imageCollection={this.state.imageCollection}\n                                                                                image_preview={this.state.image_preview}/>;\n                                    case 'callDetail':\n                                        return <ClientContainer route={this.route} handleImage={this.handleImage}\n                                                                      imageCollection={this.state.imageCollection}\n                                                                        addImageToArray={this.addImageToArray}\n                                                                        submitImage={this.submitImage}\n                                                                        image={this.state.image}\n                                                                        image_preview={this.state.image_preview}/>;\n                                   // how do i link sign up screens if these are all react screens\n                                }\n                            })()}\n\n\n             </Container>\n        </div>\n    )\n  };\n\n}\n\n\nexport default App;\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}